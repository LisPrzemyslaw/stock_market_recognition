@startuml

!theme plain
'top to bottom direction
left to right direction
skinparam linetype ortho

class AuthToken as "database.AuthToken" {
   __token_creation_time: datetime
   __auth_token: str
   AUTH_TIME: int
   __init__(self):
   auth_token(self): str
   _create_auth_token(self): str
   is_auth(self, auth_token: str): bool
}
class AuthTokenContainer as "database.AuthTokenContainer" {
   __AUTH_TOKENS: dict[str, AuthToken]
   add_token(user_id: str): str
   is_user_auth(user_id: str, token: str): bool
}
class Stock as "database.Stock" {
   user_id: str
   stock_name: str
   stock_amount: float
   __init__(self, \n\t user_id: str, \n\t stock_name: str, \n\t stock_amount: float)
   __repr__(self): str
}
class User as "database.User" {
   user_id: str
   password: str
   balance: float
   __init__(self, \n\t user_id: str, \n\t password: str, \n\t balance: float)
   __encode_password(\n\t password: str): str
   verify_password(self, \n\t password: str): bool
   __repr__(self): str
}
class LstmStockPredict as "stock_predict.LstmStockPredict" {
   scaled_data: pd.DataFrame
   x_train: np.array
   y_train: np.array
   model: Model
   scaler: MinMaxScaler
   lstm_units: int
   dropout: float
   epoch: int
   batch_size: int
   mse: float
   model_path: str
   __init__(self, \n\t data: tuple[dict, pd.DataFrame], \n\t prediction_days: int, \n\t lstm_units: int = 50, \n\t dropout: float = 0.2, \n\t epoch: int = 25, \n\t batch_size: int = 32)
   predict(self, \n\t last_days_close_values: np.array, \n\t fit_model=False): np.array
   __scale_data(self)
   __prepare_train_data(self)
   __create_model(self)
   fit(self)
}
class StockPredictFactory as "stock_predict.StockPredictFactory" {
   __STOCK_RECEIVER: StockPredictInterface
   _ALL_STOCK_PREDICT: dict
   __DEFAULT_STOCK_PREDICT: str
   create_stock_predict(predict_name: str, \n\tdata: tuple[dict, pd.DataFrame], \n\tprediction_days: int): \n\tStockPredictInterface
   get_stock_predict(): StockPredictInterface
}
abstract class StockPredictInterface as "stock_predict.StockPredictInterface" {
   historical_data: pd.DataFrame
   scaled_data
   thicker_info: dict
   name: str
   prediction_days: int
   __init__(self, \n\t data: tuple[dict, pd.DataFrame], \n\t prediction_days: int)
   predict(self, last_days_close_values: np.array)
   fit(self)
}
class StockReceiverFactory as "stock_receiver.StockReceiverFactory" {
   __STOCK_RECEIVER: StockReceiverInterface
   _ALL_STOCK_PREDICT: dict
   __DEFAULT_STOCK_RECEIVER: str
   create_stock_receiver(\n\t receiver_name: str): StockReceiverInterface
   get_stock_receiver(): StockReceiverInterface
}
abstract class StockReceiverInterface as "stock_receiver.StockReceiverInterface" {
   __init__(self)
   receive_data(self, \n\tstock_ticker: str, \n\t*args, \n\t**kwargs): \n\ttuple[dict, pd.DataFrame]
}
class YahooReceiver as "stock_receiver.YahooReceiver" {
   parameters: dict
   DEFAULT_PARAMETERS: dict
   __init__(self)
   receive_data(self, \n\t stock_ticker: str, \n\t period="max", \n\t interval="1d", \n\t start=None, \n\t end=None): tuple[dict, pd.DataFrame]
}
class DemoWallet as "wallet.DemoWallet" {
   stock_receiver: StockReceiverInterface
   __TICKER_INFO_INDEX: int
   __init__(self, db_user: User)
   buy_stock(self, stock_name: str, amount: float)
   sell_stock(self, stock_name: str, amount: float)
   get_all_stocks(self): dict[str, float]
}
class WalletFactory as "wallet.WalletFactory" {
   DEMO_WALLET: str
   _ALL_WALLETS: dict
   create_wallet(\n\t wallet_name: str, \n\t db_user: User):
}
abstract class WalletInterface as "wallet.WalletInterface" {
   db_user: User
   currency: str
   balance: float
   __init__(self, db_user: User)
   buy_stock(self, stock_name: str, amount: float)
   sell_stock(self, stock_name: str, amount: float)
   get_all_stocks(self): dict[str, float]
}

LstmStockPredict <|.. StockPredictInterface
StockPredictInterface <-- StockPredictFactory
YahooReceiver <|.. StockReceiverInterface
StockReceiverInterface <-- StockReceiverFactory
DemoWallet <|.. WalletInterface
WalletInterface <-- WalletFactory
AuthToken o-- AuthTokenContainer
AuthTokenContainer <.. User
WalletInterface o-- User
DemoWallet o-- Stock

@enduml
